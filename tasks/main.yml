---

- name: Get release timestamp
  command: date +%Y%m%d%H%M%S
  register: timestamp

- name: Create log directory
  file:
    state: directory
    owner: "{{ deployer_rails.user }}"
    group: "{{ deployer_rails.group }}"
    recurse: yes
    path: "{{ deployer_root_path }}/{{ deployer_application }}/shared/log"

- name: Create pids directory
  file:
    state: directory
    owner: "{{ deployer_rails.user }}"
    group: "{{ deployer_rails.group }}"
    recurse: yes
    path: "{{ deployer_root_path }}/{{ deployer_application }}/shared/pids"

- set_fact:
    release_path: "{{ deployer_root_path }}/{{ deployer_application }}/releases/{{ timestamp.stdout }}"

- name: Create release directory
  file:
    state: directory
    owner: "{{ deployer_rails.user }}"
    group: "{{ deployer_rails.group }}"
    recurse: yes
    path: "{{ release_path }}"

- name: checkout git repo into release directory
  git:
    repo: "{{ deployer_repo }}"
    dest: "{{ release_path }}"
    version: "development"
  sudo_user: "{{ deployer_rails.user }}"

- name: link directories to current
  file:
    state: link
    path: "{{ release_path }}/{{ item }}"
    src: "{{ deployer_root_path }}/{{ deployer_application }}/shared/{{ item }}"
    owner: "{{ deployer_rails.user }}"
    group: "{{ deployer_rails.group }}"
  with_items:
    - log
    - pids
  sudo_user: "{{ deployer_rails.user }}"

- name: link configs
  file:
    state: link
    path: "{{ release_path }}/config/{{ item }}"
    src: "{{ deployer_root_path }}/{{ deployer_application }}/shared/configs/{{ item }}"
    owner: "{{ deployer_rails.user }}"
    group: "{{ deployer_rails.group }}"
  with_items: deployer_config_files
  sudo_user: "{{ rails_user }}"

- name: Update app version
  file:
    state: link
    path: "{{ deployer_root_path }}/{{ deployer_application }}/current"
    src: "{{ release_path }}"
    owner: "{{ deployer_rails.user }}"
    group: "{{ deployer_rails.group }}"

- name: set ruby version
  alternatives:
    name: ruby
    path: /usr/bin/ruby{% if deployed_ruby_version == '1.9.3' %}1.9.1{% else %}deployed_ruby_version{% endif %}

- name: set gems version
  alternatives:
    name: gem
    path: /usr/bin/gem{% if deployed_ruby_version == '1.9.3' %}1.9.1{% else %}deployed_ruby_version{% endif %}

- name: update gems
  shell: "bundle install --path {{ deployer_root_path }}/{{ deployer_application }}/shared/bundle --jobs {{ ansible_processor_count }} --without test development --deployment --quiet"
  args:
    chdir: "{{ release_path }}"
  environment: "{{ deployer_env }}"
  sudo_user: "{{ deployer_rails.user }}"

- name: remove older releases
  shell: "ls -t1 | tail -n +4 | xargs rm -r"
  args:
    chdir: "{{ deployer_root_path }}/{{ deployer_application }}/releases/"
